if(POLICY CMP0011)
  cmake_policy(SET CMP0011 OLD)
endif(POLICY CMP0011)
if(POLICY CMP0054)
  cmake_policy(SET CMP0054 NEW)
endif(POLICY CMP0054)


include(ParseLine)

function(generate_info_strings SOURCE INIT_RESULT CONSTRUCTOR_RESULT DEF_RESULT RESET_RESULT)
  set(INIT_LIST "")
  set(CONSTRUCTOR_LIST "")
  set(DEF_LIST "")
  set(RESET_LIST "")

  file(STRINGS "${SOURCE}" SOURCE_FILE)

  # Build lists of strings
  foreach(LINE ${SOURCE_FILE})
    parse_line("${LINE}" VAR_NAME VAR_TYPE VAR_DESCRIPTION)
    if(VAR_NAME)
      if(${VAR_NAME} MATCHES "\\[")
        string(REGEX MATCH "([^[]+)\\[([^]]+)\\]" DUMMY "${VAR_NAME}")
        set(VAR_NAME ${CMAKE_MATCH_1})
        set(ARRAY_SIZE ${CMAKE_MATCH_2})
      else(${VAR_NAME} MATCHES "\\[")
        set(ARRAY_SIZE "NOTFOUND")
      endif(${VAR_NAME} MATCHES "\\[")

      if("${VAR_TYPE}" STREQUAL "i")
        set(VAR_TYPE_EXT "Int_t")
        set(INIT_VALUE "0")
      elseif("${VAR_TYPE}" STREQUAL "f")
        set(VAR_TYPE_EXT "Float_t")
        set(INIT_VALUE "(Float_t)0.0")
      elseif("${VAR_TYPE}" STREQUAL "s")
        set(VAR_TYPE_EXT "Short_t")
        set(INIT_VALUE "0")
      elseif("${VAR_TYPE}" STREQUAL "S")
        set(VAR_TYPE_EXT "std::string")
        set(INIT_VALUE "missing")
      elseif("${VAR_TYPE}" STREQUAL "b")
        set(VAR_TYPE_EXT "Bool_t")
        set(INIT_VALUE "false")
      elseif("${VAR_TYPE}" STREQUAL "vS")
        set(VAR_TYPE_EXT "std::vector<std::string>")
        set(INIT_VALUE "clear")
      elseif("${VAR_TYPE}" STREQUAL "vi")
        set(VAR_TYPE_EXT "std::vector<Int_t>")
        set(INIT_VALUE "clear")
      else()
        message(SEND_ERROR "Unrecognized variable type in line \"${LINE}\": \"${VAR_TYPE}\" was parsed")
        return()
      endif()

      string(REPLACE "\\n" "\n" VAR_DESCRIPTION "${VAR_DESCRIPTION}")

      if(ARRAY_SIZE)
        if(NOT INIT_VALUE STREQUAL "missing")
          list(APPEND CONSTRUCTOR_LIST "        std::fill_n(${VAR_NAME}, ${ARRAY_SIZE}, ${INIT_VALUE});")
        endif(NOT INIT_VALUE STREQUAL "missing")
        list(APPEND DEF_LIST "      /** \\brief ${VAR_DESCRIPTION} */\n      ${VAR_TYPE_EXT} ${VAR_NAME}[${ARRAY_SIZE}];")
      else(ARRAY_SIZE)
        if(NOT INIT_VALUE STREQUAL "missing")
          if(INIT_VALUE STREQUAL "clear")
            list(APPEND RESET_LIST "        ${VAR_NAME}.clear();")
          else(INIT_VALUE STREQUAL "clear")
            list(APPEND INIT_LIST "        ${VAR_NAME}(${INIT_VALUE})")
            list(APPEND RESET_LIST "        ${VAR_NAME} = ${INIT_VALUE};")
          endif(INIT_VALUE STREQUAL "clear")
        endif(NOT INIT_VALUE STREQUAL "missing")
        list(APPEND DEF_LIST "      /** \\brief ${VAR_DESCRIPTION} */\n      ${VAR_TYPE_EXT} ${VAR_NAME};")
      endif(ARRAY_SIZE)


    endif(VAR_NAME)
  endforeach(LINE ${SOURCE_FILE})

  # Join the lists with the appropriate delimiters
  string(REPLACE ";" ",\n" INIT_STRING "${INIT_LIST}")
  string(REPLACE ";;" ";\n" DEF_STRING "${DEF_LIST}")
  string(REPLACE ";;" ";\n" CONSTRUCTOR_STRING "${CONSTRUCTOR_LIST}")
  string(REPLACE ";;" ";\n" RESET_STRING "${RESET_LIST}")

  # Output variables
  set(${INIT_RESULT} "${INIT_STRING}" PARENT_SCOPE)
  set(${DEF_RESULT} "${DEF_STRING}" PARENT_SCOPE)
  set(${CONSTRUCTOR_RESULT} "${CONSTRUCTOR_STRING}" PARENT_SCOPE)
  set(${RESET_RESULT} "${RESET_STRING}" PARENT_SCOPE)

endfunction(generate_info_strings SOURCE INIT_RESULT CONSTRUCTOR_RESULT DEF_RESULT RESET_RESULT)

function(generate_asciiwriter_strings SOURCE OBJECT_NAME VARS NPARTICLES_ARRAYS NREMNANTS_ARRAYS)
  set(VARS_LIST "")
  set(NPARTICLES_ARRAYS_LIST "")
  set(NREMNANTS_ARRAYS_LIST "")

  file(STRINGS "${SOURCE}" SOURCE_FILE)

  # Build lists of strings
  foreach(LINE ${SOURCE_FILE})
    parse_line("${LINE}" VAR_NAME VAR_TYPE VAR_DESCRIPTION)
    if(VAR_NAME)
      if("${VAR_TYPE}" STREQUAL "vS")
        set(ARRAY_SIZE "nParticles")
      else("${VAR_TYPE}" STREQUAL "vS")
        if("${VAR_NAME}" MATCHES "\\[")
          string(REGEX MATCH "([^[]+)\\[([^]]+)\\]" DUMMY "${VAR_NAME}")
          set(VAR_NAME ${CMAKE_MATCH_1})
          set(ARRAY_SIZE ${CMAKE_MATCH_2})
        else("${VAR_NAME}" MATCHES "\\[")
          set(ARRAY_SIZE "NOTFOUND")
        endif("${VAR_NAME}" MATCHES "\\[")
      endif("${VAR_TYPE}" STREQUAL "vS")

      if(ARRAY_SIZE)
        if("${ARRAY_SIZE}" MATCHES "Particles")
          list(APPEND NPARTICLES_ARRAYS_LIST "          << ${OBJECT_NAME}.${VAR_NAME}[i] << '\\t'")
        elseif("${ARRAY_SIZE}" MATCHES "Remnants")
          list(APPEND NREMNANTS_ARRAYS_LIST "          << ${OBJECT_NAME}.${VAR_NAME}[i] << '\\t'")
        else()
          message(SEND_ERROR "Array index does not match Particles or Remnants")
          return()
        endif()
      else(ARRAY_SIZE)
        list(APPEND VARS_LIST "        << ${OBJECT_NAME}.${VAR_NAME} << '\\t'")
      endif(ARRAY_SIZE)

    endif(VAR_NAME)
  endforeach(LINE ${SOURCE_FILE})

  # Join the lists with the appropriate delimiters
  string(REPLACE ";" "\n" VARS_STRING "${VARS_LIST}")
  string(REPLACE ";" "\n" NPARTICLES_ARRAYS_STRING "${NPARTICLES_ARRAYS_LIST}")
  string(REPLACE ";" "\n" NREMNANTS_ARRAYS_STRING "${NREMNANTS_ARRAYS_LIST}")

  # Output variables
  set(${VARS} "${VARS_STRING}" PARENT_SCOPE)
  set(${NPARTICLES_ARRAYS} "${NPARTICLES_ARRAYS_STRING}" PARENT_SCOPE)
  set(${NREMNANTS_ARRAYS} "${NREMNANTS_ARRAYS_STRING}" PARENT_SCOPE)

endfunction(generate_asciiwriter_strings SOURCE OBJECT_NAME VARS NPARTICLES_ARRAYS NREMNANTS_ARRAYS)

function(generate_rootwriter_strings SOURCE OBJECT_NAME VARS ARRAYS)
  set(VARS_LIST "")
  set(ARRAYS_LIST "")

  file(STRINGS "${SOURCE}" SOURCE_FILE)

  # Build lists of strings
  foreach(LINE ${SOURCE_FILE})
    parse_line("${LINE}" VAR_NAME VAR_TYPE VAR_DESCRIPTION)
    if(VAR_NAME)
      if(${VAR_NAME} MATCHES "\\[")
        string(REGEX MATCH "([^[]+)\\[([^]]+)\\]" DUMMY "${VAR_NAME}")
        set(VAR_NAME ${CMAKE_MATCH_1})
        set(ARRAY_SIZE ${CMAKE_MATCH_2})
      else(${VAR_NAME} MATCHES "\\[")
        set(ARRAY_SIZE "NOTFOUND")
      endif(${VAR_NAME} MATCHES "\\[")

      if("${VAR_TYPE}" STREQUAL "i")
        set(VAR_TYPE_ROOT "I")
      elseif("${VAR_TYPE}" STREQUAL "f")
        set(VAR_TYPE_ROOT "F")
      elseif("${VAR_TYPE}" STREQUAL "s")
        set(VAR_TYPE_ROOT "S")
      elseif("${VAR_TYPE}" STREQUAL "b")
        set(VAR_TYPE_ROOT "O")
      elseif("${VAR_TYPE}" STREQUAL "vS")
        set(VAR_TYPE_ROOT "")
      elseif("${VAR_TYPE}" STREQUAL "vi")
        set(VAR_TYPE_ROOT "")
      elseif(NOT "${VAR_TYPE}" STREQUAL "S")
        message(SEND_ERROR "Unrecognized variable type in line \"${LINE}\": \"${VAR_TYPE}\" was parsed")
        return()
      endif()

      if(ARRAY_SIZE)
        if("${ARRAY_SIZE}" MATCHES "Particles")
          set(ARRAY_SIZE "nParticles")
        elseif("${ARRAY_SIZE}" MATCHES "Remnants")
          set(ARRAY_SIZE "nRemnants")
        else()
          message(SEND_ERROR "Array index does not match Particles or Remnants")
          return()
        endif()
        list(APPEND ARRAYS_LIST "      the${OBJECT_NAME}Tree->Branch(\"${VAR_NAME}\", the${OBJECT_NAME}Info.${VAR_NAME}, \"${VAR_NAME}[${ARRAY_SIZE}]/${VAR_TYPE_ROOT}\");")
      else(ARRAY_SIZE)
        if("${VAR_TYPE}" STREQUAL "vS" OR "${VAR_TYPE}" STREQUAL "vi" OR "${VAR_TYPE}" STREQUAL "S")
          # std::string, std::vector<std::string> or std::vector<Int_t>
          list(APPEND VARS_LIST "      the${OBJECT_NAME}Tree->Branch(\"${VAR_NAME}\", &(the${OBJECT_NAME}Info.${VAR_NAME}));")
        else("${VAR_TYPE}" STREQUAL "vS" OR "${VAR_TYPE}" STREQUAL "vi" OR "${VAR_TYPE}" STREQUAL "S")
          list(APPEND VARS_LIST "      the${OBJECT_NAME}Tree->Branch(\"${VAR_NAME}\", &(the${OBJECT_NAME}Info.${VAR_NAME}), \"${VAR_NAME}/${VAR_TYPE_ROOT}\");")
        endif("${VAR_TYPE}" STREQUAL "vS" OR "${VAR_TYPE}" STREQUAL "vi" OR "${VAR_TYPE}" STREQUAL "S")
      endif(ARRAY_SIZE)

    endif(VAR_NAME)
  endforeach(LINE ${SOURCE_FILE})

  # Join the lists with the appropriate delimiters
  string(REPLACE ";;" ";\n" VARS_STRING "${VARS_LIST}")
  string(REPLACE ";;" ";\n" ARRAYS_STRING "${ARRAYS_LIST}")

  # Output variables
  set(${VARS} "${VARS_STRING}" PARENT_SCOPE)
  set(${ARRAYS} "${ARRAYS_STRING}" PARENT_SCOPE)

endfunction(generate_rootwriter_strings SOURCE OBJECT_NAME VARS ARRAYS)
